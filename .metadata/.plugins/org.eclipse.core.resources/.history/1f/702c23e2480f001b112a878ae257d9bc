package com.example.demo.board.common;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Map;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import javax.security.auth.message.callback.PrivateKeyCallback.Request;
import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.multipart.support.StandardMultipartHttpServletRequest;

//import com.innorix.transfer.InnorixUpload;
//import com.skec.wpcs.base.BaseBehind;





public class Innorix {

	@PostMapping
	public void upload(StandardMultipartHttpServletRequest request, HttpServletResponse response) throws Exception {

		
		System.out.println("#################### request : "+request);
		// String directory = _pm.getString("com.skec.innorix.upload.temp");
		String directory = "C:/Users/jaa83/git/spring_mvc_BoardApp_hub/src/main/webapp/innorixRepository";
		//String directory = "C:\\Users\\jaa83\\git\\spring_mvc_BoardApp_hub\\src\\main\\webapp\\innorixRepository";
		System.out.println("############################### Directory : "+directory);
		//String directory = "/innorix/exam/data";
		int maxPostSize = 1024 * 1024 * 100; // bytes
		System.out.println("############################### request httpServletRequestToString:["+httpServletRequestToString(request)+"]");

		

		

	}

	
	
	
	
	String httpServletRequestToString(HttpServletRequest request) throws Exception {

	    ServletInputStream mServletInputStream = request.getInputStream();
	    byte[] httpInData = new byte[request.getContentLength()];
	    int retVal = -1;
	    StringBuilder stringBuilder = new StringBuilder();

	    while ((retVal = mServletInputStream.read(httpInData)) != -1) {
	        for (int i = 0; i < retVal; i++) {
	            stringBuilder.append(Character.toString((char) httpInData[i]));
	        }
	    }

	    return stringBuilder.toString();
	}
	
	
	
	public static String getBody(HttpServletRequest request) throws IOException {
		 
        String body = null;
        StringBuilder stringBuilder = new StringBuilder();
        BufferedReader bufferedReader = null;
 
        try {
            InputStream inputStream = request.getInputStream();
            if (inputStream != null) {
                bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
                char[] charBuffer = new char[128];
                int bytesRead = -1;
                while ((bytesRead = bufferedReader.read(charBuffer)) > 0) {
                    stringBuilder.append(charBuffer, 0, bytesRead);
                }
            } else {
                stringBuilder.append("");
            }
        } catch (IOException ex) {
            throw ex;
        } finally {
            if (bufferedReader != null) {
                try {
                    bufferedReader.close();
                } catch (IOException ex) {
                    throw ex;
                }
            }
        }
 
        body = stringBuilder.toString();
        return body;
    }


	
	
	
	
	
	
	
	
	
	/*
	 * @SuppressWarnings("finally") public void download(HttpServletRequest request,
	 * HttpServletResponse response) throws Exception {
	 * 
	 * Map map = this.getParamMap(_rm.getRequest(request, response));
	 * 
	 * String szStartOffset = request.getParameter("_StartOffset"); String
	 * szEndOffset = request.getParameter("_EndOffset");
	 * 
	 * Map fileMap = (Map) getItem("wpcs.common.getInnorixFile", map);
	 * 
	 * if (fileMap == null) {
	 * 
	 * new Exception("Parameter Error");
	 * 
	 * }
	 * 
	 * String clientFileName = fileMap.get("CLIENT_FILE_NAME").toString(); String
	 * uploadFilePath = fileMap.get("SERVER_FILE_PATH").toString();
	 * 
	 * clientFileName = java.net.URLEncoder.encode(clientFileName,
	 * "UTF-8").replaceAll("\\+", "%20");
	 * 
	 * File uploadfile = new File(uploadFilePath);
	 * 
	 * response.setContentType("application/octet-stream");
	 * response.setHeader("Accept-Ranges", "bytes");
	 * response.setHeader("Content-Disposition", "attachment; filename=\"" +
	 * clientFileName + "\"");
	 * 
	 * long startOffset = 0; long endOffset = 0;
	 * 
	 * if (szStartOffset != null) { startOffset = Long.parseLong(szStartOffset); }
	 * 
	 * if (szEndOffset != null) { endOffset = Long.parseLong(szEndOffset); }
	 * 
	 * long contentLength = 0;
	 * 
	 * if (szStartOffset != null || szEndOffset != null) {
	 * 
	 * Agent contentLength = endOffset - startOffset + 1;
	 * 
	 * } else {
	 * 
	 * html5 contentLength = uploadfile.length(); }
	 * 
	 * response.setHeader("Content-Length", "" + contentLength);
	 * 
	 * byte b[] = new byte[8192];
	 * 
	 * BufferedInputStream input = null; BufferedOutputStream output = null;
	 * 
	 * try {
	 * 
	 * input = new BufferedInputStream(new FileInputStream(uploadfile)); output =
	 * new BufferedOutputStream(response.getOutputStream());
	 * 
	 * int read = 0;
	 * 
	 * if (startOffset != 0) {
	 * 
	 * long n = input.skip(startOffset); if (n == -1) read = -1;
	 * 
	 * }
	 * 
	 * if (contentLength > 0) {
	 * 
	 * while (contentLength > 0) {
	 * 
	 * if (contentLength < 8192) {
	 * 
	 * b = new byte[(int) contentLength];
	 * 
	 * }
	 * 
	 * read = input.read(b);
	 * 
	 * if (read == -1) break;
	 * 
	 * output.write(b, 0, read); contentLength = contentLength - read;
	 * 
	 * }
	 * 
	 * }
	 * 
	 * } catch (Exception e) {
	 * 
	 * e.printStackTrace();
	 * 
	 * } finally {
	 * 
	 * if (output != null) {
	 * 
	 * output.flush(); output.close(); }
	 * 
	 * if (input != null) {
	 * 
	 * input.close(); }
	 * 
	 * 
	 * throw new Exception("Error");
	 * 
	 * }
	 * 
	 * }
	 */

}
