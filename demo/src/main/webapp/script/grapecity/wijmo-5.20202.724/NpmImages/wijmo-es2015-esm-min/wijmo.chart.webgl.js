/*!
    *
    * Wijmo Library 5.20202.724
    * http://wijmo.com/
    *
    * Copyright(c) GrapeCity, Inc.  All rights reserved.
    *
    * Licensed under the GrapeCity Commercial License.
    * sales@wijmo.com
    * wijmo.com/products/wijmo-5/license/
    *
    */

import{_registerModule}from"wijmo/wijmo";import*as core from"wijmo/wijmo";import*as chart from"wijmo/wijmo.chart";import*as selfModule from"wijmo/wijmo.chart.webgl";export class WebGLRenderEngine extends chart._SvgRenderEngine{constructor(t){super(t);this.primitives=[];this.clipRects={};this.init()}beginRender(){super.beginRender();this.isIE?this.element.appendChild(this.canvas):this.element.appendChild(this.foCanvas);let t=this.gl;t.viewport(0,0,t.canvas.width,t.canvas.height);t.clearColor(0,0,0,0);t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT);t.enable(t.BLEND);t.blendFuncSeparate(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA);this.primitives.forEach(t=>t.beginRender());this.clipRects={}}setViewportSize(t,i){super.setViewportSize(t,i);if(this.foCanvas){this.foCanvas.setAttribute("width",t.toString());this.foCanvas.setAttribute("height",i.toString())}let e=this.gl;e.canvas.width=t;e.canvas.height=i}endRender(){this.primitives.forEach(t=>t.endRender());super.endRender();if(this.isIE){let t=document.createElementNS(WebGLRenderEngine.svgns,"image");t.setAttribute("width",this.gl.canvas.width);t.setAttribute("height",this.gl.canvas.height);t.setAttribute("href",this.canvas.toDataURL());this.element.appendChild(t);this.element.removeChild(this.canvas)}}drawEllipse(t,i,e,r,s,o){this.edraw.drawEllipse(new core.Rect(t-e,i-r,2*e,2*r),this.fill);return null}drawRect(t,i,e,r,s,o,n){if("wj-plot-area"==this._groupCls)return super.drawRect(t,i,e,r,s,o,n);this.rdraw.drawRect(new core.Rect(t,i,e,r),this.fill);return null}drawLines(t,i,e,r,s,o){this.ldraw.drawLines(t,i,o,this.stroke,s?this.clipRects[s]:null);return null}drawPolygon(t,i,e,r,s){this.adraw.drawPolygon(t,i,this.fill,s?this.clipRects[s]:null);return null}addClipRect(t,i){super.addClipRect(t,i);t&&i&&(this.clipRects[i]=t)}init(){this.canvas=document.createElement("canvas");this.gl=this.canvas.getContext("webgl");if(this.gl){this.canvas.setAttribute("style","margin:0px;padding:0px;border:none");let t=document.createElementNS("http://www.w3.org/1999/xhtml","div");t.setAttribute("style","margin:0px;padding:0px;border:none");this.foCanvas=document.createElementNS(WebGLRenderEngine.svgns,"foreignObject");t.appendChild(this.canvas);this.foCanvas.appendChild(t)}else{this.gl=this.canvas.getContext("experimental-webgl");this.isIE=!0;this.canvas.setAttribute("style","visibility:hidden;position:absolute;top:-1000px;margin:0px;padding:0px;border:none")}this.rdraw=new _GLDrawRect(this.gl);this.edraw=new _GLDrawEllipse(this.gl);this.ldraw=new _GLDrawLines(this.gl);this.adraw=new _GLDrawAreas(this.gl);this.primitives.push(this.rdraw,this.edraw,this.ldraw,this.adraw)}}WebGLRenderEngine.svgns="http://www.w3.org/2000/svg";class _GLDrawBase{constructor(t){this._vsSource="\n    attribute vec2 a_position;\n    \n    uniform vec2 u_resolution;\n    \n    void main() {\n      vec2 zeroToOne = a_position / u_resolution;\n      vec2 zeroToTwo = zeroToOne * 2.0;\n      vec2 clipSpace = zeroToTwo - 1.0;\n      gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n    }\n    ";this._fsSource="\n    precision mediump float;\n    uniform vec4 u_color;\n    void main() {\n      gl_FragColor = u_color;\n    }\n    ";this.gl=t}init(){let t=this.gl;this.shaderProgram=this.initShaderProgram(this.vsSource,this.fsSource);this.positionAttributeLocation=t.getAttribLocation(this.shaderProgram,"a_position");this.resolutionUniformLocation=t.getUniformLocation(this.shaderProgram,"u_resolution");this.colorLocation=t.getUniformLocation(this.shaderProgram,"u_color");t.useProgram(this.shaderProgram);this.positionBuffer=t.createBuffer()}beginRender(){let t=this.gl;t.useProgram(this.shaderProgram);t.uniform2f(this.resolutionUniformLocation,t.canvas.width,t.canvas.height)}endRender(){this.flush()}flush(){}initShaderProgram(t,i){let e=this.gl;const r=this.loadShader(e.VERTEX_SHADER,t),s=this.loadShader(e.FRAGMENT_SHADER,i),o=e.createProgram();e.attachShader(o,r);e.attachShader(o,s);e.linkProgram(o);if(!e.getProgramParameter(o,e.LINK_STATUS)){alert("Unable to initialize the shader program: "+e.getProgramInfoLog(o));return null}return o}loadShader(t,i){const e=this.gl,r=e.createShader(t);e.shaderSource(r,i);e.compileShader(r);if(!e.getShaderParameter(r,e.COMPILE_STATUS)){alert("An error occurred compiling the shaders: "+e.getShaderInfoLog(r));e.deleteShader(r);return null}return r}get vsSource(){return this._vsSource}get fsSource(){return this._fsSource}}class _GLDrawRect extends _GLDrawBase{constructor(t){super(t);this.BUFFER_SIZE=1e4;this.bufRects=[];this.bufLen=0;this.init()}initBuffers(){if(!this.buffer){let t=this.gl;this.buffer=new Float32Array(12*this.BUFFER_SIZE);this.bufRects=new Array(this.BUFFER_SIZE);t.enableVertexAttribArray(this.positionAttributeLocation);t.bindBuffer(t.ARRAY_BUFFER,this.positionBuffer);t.vertexAttribPointer(this.positionAttributeLocation,2,t.FLOAT,!1,0,0);t.bufferData(t.ARRAY_BUFFER,4*this.buffer.length,t.DYNAMIC_DRAW)}}drawRect(t,i){this.initBuffers();if(i!==this.previousFill){this.flush();this.previousFill=i}this.bufRects[this.bufLen++]=t;this.bufLen>=this.BUFFER_SIZE&&this.flush()}flush(){if(0==this.bufLen)return;let t=this.gl;t.useProgram(this.shaderProgram);let i=new core.Color(this.previousFill);t.uniform4f(this.colorLocation,i.r/255,i.g/255,i.b/255,i.a);t.enableVertexAttribArray(this.positionAttributeLocation);t.bindBuffer(t.ARRAY_BUFFER,this.positionBuffer);t.vertexAttribPointer(this.positionAttributeLocation,2,t.FLOAT,!1,0,0);this.setData();t.enableVertexAttribArray(this.positionAttributeLocation);t.bindBuffer(t.ARRAY_BUFFER,this.positionBuffer);t.vertexAttribPointer(this.positionAttributeLocation,2,t.FLOAT,!1,0,0);t.drawArrays(t.TRIANGLES,0,6*this.bufLen);this.bufLen=0}setData(){let t=this.gl,i=this.bufLen,e=this.buffer;for(let t=0;t<i;t++){let i=this.bufRects[t],r=i.left,s=i.right,o=i.top,n=i.bottom,a=12*t;e[a]=r;e[a+1]=o;e[a+2]=s;e[a+3]=o;e[a+4]=r;e[a+5]=n;e[a+6]=r;e[a+7]=n;e[a+8]=s;e[a+9]=o;e[a+10]=s;e[a+11]=n}t.bufferSubData(t.ARRAY_BUFFER,0,e.subarray(0,12*i))}}class _GLDrawEllipse extends _GLDrawBase{constructor(t){super(t);this.NTRIANGLES=12;this.BUFFER_SIZE=1e4;this.bufRects=new Array(this.BUFFER_SIZE);this.bufLen=0;this.sin1=new Float32Array(this.NTRIANGLES);this.sin2=new Float32Array(this.NTRIANGLES);this.cos1=new Float32Array(this.NTRIANGLES);this.cos2=new Float32Array(this.NTRIANGLES);this.data=new Float32Array(this.BUFFER_SIZE*this.NTRIANGLES*6);let i=2*Math.PI/this.NTRIANGLES;for(let t=0;t<this.NTRIANGLES;t++){let e=i*t;this.sin1[t]=Math.sin(e);this.cos1[t]=Math.cos(e);this.sin2[t]=Math.sin(e+i);this.cos2[t]=Math.cos(e+i)}this.init();t.enableVertexAttribArray(this.positionAttributeLocation);t.bindBuffer(t.ARRAY_BUFFER,this.positionBuffer);t.vertexAttribPointer(this.positionAttributeLocation,2,t.FLOAT,!1,0,0);t.bufferData(t.ARRAY_BUFFER,4*this.data.length,t.DYNAMIC_DRAW)}drawEllipse(t,i){if(i!==this.previousFill){this.flush();this.previousFill=i}this.bufRects[this.bufLen++]=t;this.bufLen>=this.BUFFER_SIZE&&this.flush()}flush(){if(0==this.bufLen)return;let t=this.gl;t.useProgram(this.shaderProgram);let i=new core.Color(this.previousFill);t.uniform4f(this.colorLocation,i.r/255,i.g/255,i.b/255,i.a);t.enableVertexAttribArray(this.positionAttributeLocation);t.bindBuffer(t.ARRAY_BUFFER,this.positionBuffer);t.vertexAttribPointer(this.positionAttributeLocation,2,t.FLOAT,!1,0,0);this.setData();t.enableVertexAttribArray(this.positionAttributeLocation);t.bindBuffer(t.ARRAY_BUFFER,this.positionBuffer);t.vertexAttribPointer(this.positionAttributeLocation,2,t.FLOAT,!1,0,0);t.drawArrays(t.TRIANGLES,0,this.bufLen*this.NTRIANGLES*3);this.bufLen=0}setData(){let t=this.gl,i=this.bufLen,e=this.data,r=0;for(let t=0;t<i;t++){let i=this.bufRects[t],s=.5*i.width,o=.5*i.height,n=i.left+s,a=i.top+o;for(let i=0;i<this.NTRIANGLES;i++){e[r=6*(t*this.NTRIANGLES+i)]=n;e[r+1]=a;e[r+2]=n+s*this.sin1[i];e[r+3]=a+o*this.cos1[i];e[r+4]=n+s*this.sin2[i];e[r+5]=a+o*this.cos2[i]}}t.bufferSubData(t.ARRAY_BUFFER,0,e.subarray(0,r+6))}}class _GLDrawPoints extends _GLDrawBase{constructor(t){super(t);this.BUFFER_SIZE=1e5;this.bufferLen=0;this._vsSource1="\n    attribute vec2 a_position;\n    uniform vec2 u_resolution;\n    void main() {\n      vec2 zeroToOne = a_position / u_resolution;\n      vec2 zeroToTwo = zeroToOne * 2.0;\n      vec2 clipSpace = zeroToTwo - 1.0;\n      gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n      gl_PointSize = 5.0;\n    }\n    ";this.init()}initBuffers(){if(!this.buffer){let t=this.gl;this.buffer=new Float32Array(this.BUFFER_SIZE);t.enableVertexAttribArray(this.positionAttributeLocation);t.bindBuffer(t.ARRAY_BUFFER,this.positionBuffer);t.vertexAttribPointer(this.positionAttributeLocation,2,t.FLOAT,!1,0,0);t.bufferData(t.ARRAY_BUFFER,4*this.buffer.length,t.DYNAMIC_DRAW)}}drawPoint(t,i){this.initBuffers();if(i!==this.previousFill){this.flush();this.previousFill=i}this.buffer[this.bufferLen++]=t.x;this.buffer[this.bufferLen++]=t.y;this.bufferLen>=this.BUFFER_SIZE&&this.flush()}flush(){if(0==this.bufferLen)return;let t=this.gl;t.useProgram(this.shaderProgram);let i=new core.Color(this.previousFill);t.uniform4f(this.colorLocation,i.r/255,i.g/255,i.b/255,i.a>0?1:0);t.enableVertexAttribArray(this.positionAttributeLocation);t.bindBuffer(t.ARRAY_BUFFER,this.positionBuffer);t.vertexAttribPointer(this.positionAttributeLocation,2,t.FLOAT,!1,0,0);t.bufferSubData(t.ARRAY_BUFFER,0,this.buffer.subarray(0,this.bufferLen));t.drawArrays(t.POINTS,0,this.bufferLen/2);this.bufferLen=0}get vsSource(){return this._vsSource1}}class _GLDrawLines extends _GLDrawBase{constructor(t){super(t);this.BUFFER_SIZE=1e6;this.init()}initBuffers(){if(!this.buffer){let t=this.gl;this.buffer=new Float32Array(4*this.BUFFER_SIZE);t.enableVertexAttribArray(this.positionAttributeLocation);t.bindBuffer(t.ARRAY_BUFFER,this.positionBuffer);t.vertexAttribPointer(this.positionAttributeLocation,2,t.FLOAT,!1,0,0);t.bufferData(t.ARRAY_BUFFER,4*this.buffer.length,t.DYNAMIC_DRAW)}}drawLines(t,i,e,r,s=null){this.initBuffers();let o=e||t.length,n=this.gl;n.useProgram(this.shaderProgram);if(s){n.enable(n.SCISSOR_TEST);n.scissor(s.left,n.canvas.height-s.bottom,s.width,s.height)}let a=new core.Color(r);n.uniform4f(this.colorLocation,a.r/255,a.g/255,a.b/255,a.a>0?1:0);n.enableVertexAttribArray(this.positionAttributeLocation);n.bindBuffer(n.ARRAY_BUFFER,this.positionBuffer);n.vertexAttribPointer(this.positionAttributeLocation,2,n.FLOAT,!1,0,0);for(let e=0;e<o;e++){this.buffer[2*e]=t[e];this.buffer[2*e+1]=i[e]}n.bufferSubData(n.ARRAY_BUFFER,0,this.buffer.subarray(0,2*o));n.enableVertexAttribArray(this.positionAttributeLocation);n.bindBuffer(n.ARRAY_BUFFER,this.positionBuffer);n.vertexAttribPointer(this.positionAttributeLocation,2,n.FLOAT,!1,0,0);n.drawArrays(n.LINE_STRIP,0,o);s&&n.disable(n.SCISSOR_TEST)}}class _GLDrawAreas extends _GLDrawBase{constructor(t){super(t);this.BUFFER_SIZE=1e6;this.init()}initBuffers(){if(!this.buffer){let t=this.gl;this.buffer=new Float32Array(4*this.BUFFER_SIZE);t.enableVertexAttribArray(this.positionAttributeLocation);t.bindBuffer(t.ARRAY_BUFFER,this.positionBuffer);t.vertexAttribPointer(this.positionAttributeLocation,2,t.FLOAT,!1,0,0);t.bufferData(t.ARRAY_BUFFER,4*this.buffer.length,t.DYNAMIC_DRAW)}}drawPolygon(t,i,e,r=null){this.initBuffers();let s=t.length,o=this.gl;o.useProgram(this.shaderProgram);if(r){o.enable(o.SCISSOR_TEST);o.scissor(r.left,o.canvas.height-r.bottom,r.width,r.height)}let n=new core.Color(e);o.uniform4f(this.colorLocation,n.r/255,n.g/255,n.b/255,n.a>0?1:0);o.enableVertexAttribArray(this.positionAttributeLocation);o.bindBuffer(o.ARRAY_BUFFER,this.positionBuffer);o.vertexAttribPointer(this.positionAttributeLocation,2,o.FLOAT,!1,0,0);t[s-2],t[s-1];let a=i[s-2],h=0;for(let e=0;e<s-2;e++){this.buffer[h++]=t[e];this.buffer[h++]=i[e];this.buffer[h++]=t[e];this.buffer[h++]=a}o.bufferSubData(o.ARRAY_BUFFER,0,this.buffer.subarray(0,h));o.enableVertexAttribArray(this.positionAttributeLocation);o.bindBuffer(o.ARRAY_BUFFER,this.positionBuffer);o.vertexAttribPointer(this.positionAttributeLocation,2,o.FLOAT,!1,0,0);o.drawArrays(o.TRIANGLE_STRIP,0,2*(s-2));r&&o.disable(o.SCISSOR_TEST)}}_registerModule("wijmo.chart.webgl",selfModule);